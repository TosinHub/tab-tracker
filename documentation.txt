TAB TRACKER VEUJS/EXPRESS JS APPLICATION
Install the latest version of NODE.
Create a github repo for the project and clone into your local workspaces
Install VueJs globally from your command line $npm install -g vue-cli
Next initiate a vueJs template into a client folder where the all VueJs code would reside $vue init webpack(//template name) client (//project-name)
Using/Running npm install from the command line, you would install all dependencies in the package.json file
In case it gives npm ERR! code EINTEGRITY error, follow the following steps
 npm cache clean --force
 npm i -g npm
 npm install

After successful installation, run npm run dev
Then run localhost:8080 from your browser, you should see welcome to VueJS
Next is to make a server folder in your tab-tracker folder...mkdir server from command prompt
(This is to ut the client side and server side codes to be in different folders)

cd into the server folder and $ npm init -f
That would create the package.json file
Then $ npm install --save nodemon eslint
(nodemon helps keep restarting the server when you make any change to your code)
If you have issues like permission denied error use $ npm config set unsafe-perm true

After installing nodemon and eslint, update the scripts secion of the package.json file with 

   "start": "nodemon src/app.js --exec  \"npm run lint && node\"",
    "lint": "eslint src/**/*.js",


Create a new folder in your server folder and name it src, then create a file called app.js inside the src folder
 
 

Then initiate eslint $ node ./node_modules/eslint/bin/eslint.js --init
Choose the following options:
>use a popular style guide
>Standard
>Javascript

after a successful installation $npm start  
Then install other node dependencies for the application $ npm install --save express body-parser cors morgan
(if any error run $npm config set unsafe-perm true)

Then $npm start again


Then import the new modules just installed in the app.js file in the src folder, putting then in a const variable as seen bleow

const express = require('express')
const bodyParser = require('body-parser')
const cors = require('cors')
const morgan = require('morgan')

const app = express()
app.use(morgan('combined'))
app.use(bodyParser.json())
app.use(cors())

app.get('/status', (req, res) => {
  res.send({
    message: 'hello world'
  })
})

app.listen(process.env.PORT || 8081)


Then access localhost:8081/status from your browser


Now making the client have access to the server side using http request and axios library would be installed to achieve this
cd into client folder
$ npm install --save axios

From yout text editor

Create a new folder in the src folder of the client folder and name it services
Create Api.js file inside the folder
Write this code in the Api.js file

import axios from 'axios'
//return a connector
export default () => {
  return axios.create({
    baseURL: `http://localhost:8081` //pointing to the backend url
  }) 
}

Create AuthenticationService.js inside same services folder and place this code inside which would post the register credentials into the the imported Api post request from the api.js file

import Api from '@/services/Api'

export default {
  register (credentials){
    return Api().post('register', credentials)
  }
}

Then go to the server and edit the /status endpoint to the code below and test using Postman from your google app

app.post('/register', (req, res) => {
  res.send({
    message: `Your user with ${req.body.email} was registered! Great!` //note ` is not '
  })
})

From the UI or client side, open the router folder and open the index.js file and add Register router path and it would look like this

import Vue from 'vue'
import Router from 'vue-router'
import Hello from '@/components/Hello'
import Register from '@/components/Register' //This must be added to import the Register component

Vue.use(Router)

export default new Router({
  routes: [
    {
      path: '/',
      name: 'Hello',
      component: Hello
    },
     {
      path: '/register',
      name: 'register',
      component: Register
    }
  ]
})



Then open the component folder and add Register.Vue file and put in this code in the script session

<template>
  <div>
    <h1>Register</h1>
<input type="email" name="email" placeholder="email" v-model="email">
<input type="password" name="password" placeholder="password" v-model="password">
<br>
<button @click="register">Register</button>

  </div>
</template>

<script>
import AuthenticationService from '@/services/AuthenticationService'
export default {

  data () {
    return {
      email: '',
      password: ''
    }
  },
  methods: {
    async register () {
      const response = await AuthenticationService.register({
        email: this.email,
        password: this.password
      })
      console.log(response.data)
    }
  }
}
</script>

<!-- Add "scoped" attribute to limit CSS to this component only -->
<style scoped>

</style>


Then access the register route from you browser and check the console to see the response from the server  



 USING SEQUELIZE DB 

CD into the server folder
Install sequelize and its dependencies
$npm install --save sequelize sqlite3@3.1.8

Create a new file called routes.js in the src folder and cut the app.post route and place the code in the routes.js file, exporting it as seen below

module.exports = (app) => {

app.post('/register', (req, res) => {
  res.send({
    message: `Your user with ${req.body.email} was registered! Great!`
  })
})	
}

Replace that code with require('./routes')(app) in the app.js file

Create a new folder called config inside the src folder and add config.js file and export the port number...Place this code

module.exports = {
  port: 8081
}


Then update your app.js file in src folder arrive at the following code to show previous refactoring to show sequelize module

const express = require('express')
const bodyParser = require('body-parser')
const cors = require('cors')
const morgan = require('morgan')
const {sequelize} = require('./models') // importing sequelize object
const config = require('./config/config')

const app = express()
app.use(morgan('combined'))
app.use(bodyParser.json())
app.use(cors())

require('./routes')(app)

sequelize.sync()
  .then(() => {
    app.listen(config.port)
    console.log(`Server started on port ${config.port}`)
  })


Check your server it would indicate a model not found
Create a folder called models inside the src folder and create a User.js file inside which is going the be the user model. Place the code in the file

module.exports = (sequelize, DataTypes) =>
 sequelize.define('User', {
  email: {
  	type: DataTypes.STRING,
  	unique: true
  },
  password: DataTypes.STRING
 })

Then create another file inside the models folder called index.js and put the following codes

const fs = require('fs')
const path = require('path')
const Sequelize = require('Sequelize')
const config = require('../config/config')
const db = {}

const sequelize = new Sequelize(
  config.db.database,
  config.db.user,
  config.db.password,
  config.db.options
)

fs
  .readdirSync(__dirname)
  .filter((file) =>
    file !== 'index.js'
  )
  .forEach((file) => {
    const model = sequelize.import(path.join(__dirname, file))
    db[model.name] = model
  })

db.sequelize = sequelize
db.Sequelize = Sequelize

module.exports = db

Then update the config.js file to include the  database env variables. New code

module.exports = {
  port: 8081,
  db: {
    database: process.env.DB_NAME || 'tabtracker',
    user: process.env.DB_USER || 'tabtracker',
    password: process.env.DB_PASS || 'tabtracker',
    options: {
      dialect: process.env.DIALECT || 'sqlite',
      host: process.env.HOST || 'localhost',
      storage: './tabtracker.sqlite'
    }
  }
}


Then check the cmd where the server is restarting, the new table would have been created in the db

Now create a new  folder called controllers, controller is basically where we have all the end point defined
In the controller folder create AuthenticationController.js, put this code

module.exports = {
  register (req, res) {
    res.send({
      message: `Your user with ${req.body.email} was registered! Great!`
    })
  }
}

The code above is from the router.js file which would be updated to get the controller into the route,(refactoring)
The routes.js file would look like this

const AuthenticationController = require('./controllers/AuthenticationController')
module.exports = (app) => {
  app.post('/register', AuthenticationController.register)
}


Next is to create a user model to help new users register into the database, this would be done by updating the AuthenticationController.js file

const {User} = require('../models')

module.exports = {
  async register (req, res) {
    try {
      const user = await User.create(req.body)
      res.send(user.toJSON())
    } catch (err) {
      res.status(400).send({
        error: 'This email account is already in use'
      })
    }
  }
}

Using your postman, send a post request to register a new user, it would register first showing details in the body, if you try to send same detail again, 
it would return an error that email already exist, this is made possible because we made the email unique in the user model

Next is to install a verification framework called joi to help validate request like that of email must be exact email format, and password of a specific format.
Create a folder called policies and create a AuthenticationControllerPolicies.js and put the Joi authentication code inside as seen below


const Joi = require('joi')

module.exports = {
    register(req, res, next) {
        const schema = {
            email: Joi.string().email(),
            password: Joi.string().regex(
                new RegExp('^[a-zA-Z0-9]{8,32}$')
            )
        }

        const { error } = Joi.validate(req.body, schema)

        if (error) {
            switch (error.details[0].context.key) {
                case 'email':
                    res.status(400).send({
                        error: 'You must provide a valid email address'
                    })
                    break
                case 'password':
                    res.status(400).send({
                        error: `The password provided failed to match the following rules:
              <br>
              1. It must contain ONLY the following characters: lower case, upper case, numerics.
              <br>
              2. It must be at least 8 characters in length and not greater than 32 characters in length.
            `
                    })
                    break
                default:
                    res.status(400).send({
                        error: 'Invalid registration information'
                    })
            }
        } else {
            next()
        }
    }
}



Then add the AuthenticationControllerPolicies.js as a middleware before the registration route, this would be implemented in the route.js file..It would look like this


const AuthenticationController = require('./controllers/AuthenticationController')

const AuthenticationControllerPolicy = require('./policies/AuthenticationControllerPolicy')
module.exports = (app) => {
  app.post('/register', AuthenticationControllerPolicy.register,
    AuthenticationController.register)
}



After this, then use the postman app to try out all the new implemented authentication policies.

Next is to access the client folder, the Register.vue folder and update it to display the error from the server


<template>
  <div>
    <h1>Register</h1>
    <input type="email" name="email" placeholder="email" v-model="email">
    <input type="password" name="password" placeholder="password" v-model="password">
    <br>
    <div class="error" v-html="error" ></div>
    <br>
    <button @click="register">Register</button>

  </div>
</template>

<script>
import AuthenticationService from '@/services/AuthenticationService'
export default {

  data () {
    return {
      email: '',
      password: '',
      error: null
    }
  },
  methods: {
    async register () {
      try {
        await AuthenticationService.register({
          email: this.email,
          password: this.password
        })
      } catch (error) {
        this.error = error.response.data.error
      }
    }
  }
}
</script>

<!-- Add "scoped" attribute to limit CSS to this component only -->
<style scoped>
.error{
  color: red;
}
</style>



 Next to help style the app, we use vuetify framework, so we $npm install --save vuetify and import it in the main.js file

// The Vue build version to load with the `import` command
// (runtime-only or standalone) has been set in webpack.base.conf with an alias.

import Vue from 'vue'

import App from './App'

import router from './router'

import Vuetify from 'vuetify'

import 'vuetify/dist/vuetify.min.css'


Vue.config.productionTip = false

Vue.use(Vuetify)


/* eslint-disable no-new */

new Vue({
  
el: '#app',

  router,
  
template: '<App/>',
 
 components: { App }

})












Create an header.vue file for the whole application to adopt one header...Implenting various links

<template>
 <v-toolbar fixed class="cyan" dark>
   <v-toolbar-title class="mr-4" ><span @click="navigateTo({name: 'home'})" class="home">Tab Tracker</span> </v-toolbar-title>

 <v-toolbar-items>
   <v-btn flat dark>Browse</v-btn>
 </v-toolbar-items>
 <v-spacer></v-spacer>
 <v-toolbar-items>
   
    <v-btn flat dark 
 @click="navigateTo({name: 'login'})"
 >Login</v-btn>

    <v-btn flat dark 
 @click="navigateTo({name: 'register'})"
 >Sign Up</v-btn>
 
 </v-toolbar-items>
 </v-toolbar>
</template>

<script>
export default{
  methods: {
    navigateTo (route) {
      this.$router.push(route)
    }
  }
}
</script>

<!-- Add "scoped" attribute to limit CSS to this component only -->
<style scoped>
.home{
  cursor: pointer;
}
</style>


The app.vue project would also be updated to adopt the header.vue page

<template>
  <div id="app">
    <v-app><page-header />
    <main>
      <v-container fluid> <router-view></router-view></v-container>
    </main>
  
  </v-app>
    
   
   
  </div>
</template>


<script>

import PageHeader from '@/components/Header.vue'

export default {
  name: 'app',
  components: {
    PageHeader
  }
}

</script>


<style>
#app {
  font-family: 'Avenir', Helvetica, Arial, sans-serif;

  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;

  text-align: center;
  color: #2c3e50;
 
 margin-top: 60px;
}
.input-group--text-field input{
  border-bottom: 1px solid black;
}

</style>





